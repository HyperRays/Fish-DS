Advanced Optimizations
----------------------
-unroll[n]
          set maximum number of times to unroll loops. Omit n to use default
          heuristics. Use n=0 to disable the loop unroller
-funroll-loops
          unroll loops based on default heuristics
-[no]pad  enable/disable(DEFAULT) changing variable and array memory layout
-safe-cray-ptr
          Cray pointers do not alias with other variables
-[no-]ansi-alias
          enable(DEFAULT)/disable use of ANSI aliasing rules optimizations;
          user asserts that the program adheres to these rules
-reentrancy <keyword>
          specify whether the threaded, reentrant run-time support should be
          used
          Keywords: none (same as -noreentrancy), threaded(DEFAULT), async
-noreentrancy
          do not use threaded, reentrant run-time support
-heap-arrays [n]
          temporary arrays of minimum size n (in kilobytes) are allocated in
          heap memory rather than on the stack. If n is not specified,
          all temporary arrays are allocated in heap memory.
-no-heap-arrays
          temporary arrays are allocated on the stack (DEFAULT)
-[no-]vec
          enables(DEFAULT)/disables vectorization
-vec-threshold[n]
          sets a threshold for the vectorization of loops based on the
          probability of profitable execution of the vectorized loop in
          parallel
-vecabi=<arg>
          select vector function ABI
            legacy - use the legacy vector function ABI
            compat - use the compatibility vector function ABI (DEFAULT)
            cmdtarget - generate an extended set of vector functions
            gcc - use GCC compatible ABI
-f[no-]vec-with-mask
          Enable vectorization for short trip-count loops with masking
-f[no-]vec-peel-loops
          Enable peel loop vectorization
-f[no-]vec-remainder-loops
          Enable remainder loop vectorization
-q[no-]opt-jump-tables
          control the generation of jump tables
-fno-jump-tables
          do not generate jump tables for switches and if-then-else statements
-qopt-streaming-stores=<arg>
          specifies whether streaming stores are generated
            always - enables generation of streaming stores under the
                     assumption that the application is memory bound. Also,
                     the user is responsible for inserting the right memory
                     fences for synchronization
            auto - compiler decides when streaming stores are used (DEFAULT)
            never - disables generation of streaming stores
-qmkl[=<arg>]
          link to the Intel(R) Math Kernel Library (Intel(R) MKL) and bring
          in the associated headers
            parallel - link using the threaded Intel(R) MKL libraries. This
                         is the default when -qmkl is specified
            sequential - link using the non-threaded Intel(R) MKL libraries
            cluster - link using the Intel(R) MKL Cluster libraries plus
                         the sequential Intel(R) MKL libraries
-qmkl-ilp64[=<arg>]
          link to the Intel(R) Math Kernel ILP64 variant Libraries
          (Intel(R) MKL) and bring in the associated headers
            parallel - link using the threaded Intel(R) MKL libraries. This
                         is the default when -qmkl-ilp64 is specified
            sequential - link using the non-threaded Intel(R) MKL libraries
            cluster - link using the Intel(R) MKL Cluster libraries plus
                         the sequential Intel(R) MKL libraries
-coarray[=<keyword>]
          enable/disable(DEFAULT) coarray syntax for data parallel
          programming, and set the relationship between the coarray
          images.
          keywords: shared - default if keyword is omitted
                    single - overrides any other keyword
                    distributed
-coarray-num-images=n
          set default number of coarray images
-qopt-mem-layout-trans[=<level>]
          controls the level of memory layout transformations performed by the
          compiler
           0 - disable memory layout transformations (same as
               -qno-opt-mem-layout-trans)
           1 - enable basic memory layout transformations
           2 - enable more memory layout transformations (DEFAULT when the
               option is specified)
           3 - enable aggressive memory layout transformations
-qopt-prefetch[=n]
          enable levels of prefetch insertion, where 0 disables.
          n may be 0 through 5 inclusive. Default is 2.
-qopt-dynamic-align
          enable dynamic data alignment optimizations. Specify
          -qno-opt-dynamic-align to disable(DEFAULT)
-qopt-zmm-usage=<keyword>
          Specifies the level of zmm registers usage. You can specify one of
          the following:
            low - Tells the compiler that the compiled program is unlikely to
                   benefit from zmm registers usage. It specifies that the
                   compiler should avoid using zmm registers unless it can
                   prove the gain from their usage.
            high - Tells the compiler to generate zmm code without restrictions
-qoverride-limits
          provides a way to override certain internal compiler limits that are
          intended to prevent excessive memory usage or compile times for very
          large, complex compilation units.
-q[no-]opt-multiple-gather-scatter-by-shuffles
          Enables or disables the optimization for multiple adjacent
          gather/scatter type vector memory references.
-m[no-]branches-within-32B-boundaries
          align branches and fused branches on 32 byte boundaries
-malign-branch-prefix-size=<size>
          align branches with prefix of <size>.
-malign-branch=<arg>
          specify types of branches to align,
          where <arg> can be: fused, jcc, jmp, call, ret, indirect.
-malign-branch-boundary=<arg>
          align branches and fused branches on 32 byte boundaries
-qopt-for-throughput=<arg>
          Using 'multi-job', which is the default, the compiler will optimize
          for throughput performance, assuming multiple jobs are running.
          The memory optimizations for single job versus multiple jobs can be
          tuned in different ways by the compiler.
